#! /usr/bin/perl -w

use strict;
use warnings;
use Getopt::Long;
use Cwd 'abs_path';
my $abs_path = abs_path(__FILE__);
my @tmp = split(/\//, $abs_path);
pop(@tmp);
$abs_path = join("/", @tmp);

sub check_outDir($);
sub check_bed($);
sub check_for_R();
sub check_for_fasta_twobit($);


my $usage = "\nUse:\n\tMutascope callSomatic [-bed BED] [-dbsnp VCF] [-fasta FA] [-pdir PATH] [-normal NAME] [-tumor NAME] [-BQ INT] [-MQ INT] [-saaf FLOAT] [-mcovs INT,FLOAT] [-e FLOAT] [-het FLOAT] [-noBlacklist] [-useTumorErrors] [-h]


Description:
\tcallSomatic calls somatic mutations using a normal-tumor pair. If the 'blacklist' file is not already generated by Mutascope then either generate the file (bed.blacklist) using Mutascope makeBlackList or specify the -noBlacklist command.

Example:
\tMutascope callSomatic -bed BED_NAME.bed -dbsnp dbsnp131.vcf -fasta hg19.fa -pdir /home/projects/ -normal patient1Normal -tumor patient1Tumor 

Options:
\t-bed\t\tBED\tBED format file containing target locations with primer locations (See BED format in the Manual.pdf for more detail) [REQUIRED]
\t-dbsnp\t\tVCF\tdbSNP file in VCF format [REQUIRED]
\t-fasta\t\tFA\tFASTA file of reference genome [REQUIRED]
\t-pdir\t\tPATH\tPath to the PROJECT directory [REQUIRED]
\t-normal\t\tSTRING\tName of the NORMAL sample (only use letters or numbers! No symbols!) [REQUIRED]
\t-tumor\t\tSTRING\tName of the TUMOR sample (only use letters or numbers! No symbols!) [REQUIRED]
\t-BQ\t\tINT\tMinimum Base Quality score (default 10) [Optional]
\t-MQ\t\tINT\tMinimum Mapping Quality score (default 1) [Optional]
\t-saaf\t\tFLOAT\tMinimum Percent of reads in the TUMOR sample with the alternate allele for calling Somatic variants (default 0.5) [Optional]
\t-gaaf\t\tINT\tMinimum Percent of reads in the NORMAL sample with the alternate allele for calling Germline variants (default 15) [Optional]
\t-mcovs\t\tINT,FLOAT\tThe minimum coverage and lower coverage percentile used to calculate the minimum coverage to call variants, whichever is greater (default 10,0.5) [Optional]
\t-e\t\tFLOAT\tDefault error rate (default 0.005) [Optional]
\t-het\t\tFLOAT\tProbability of germline SNP. Prior in Bayesian test (default 0.001) [Optional]
\t-noBlacklist\tFLAG to not use/generate the blacklist file [Optional]
\t-useTumorErrors\tFLAG to specify to use the Tumor error rate file when calling Somatic Variants [Optional]
\t-h\t\tFLAG to output help message [Optional]
\n";


my $BQ = 10;
my $MQ = 1;
my $dbsnp;
my $tumor;
my $normal;
my $pdir;
my $h;
my $noBlacklist;
my $useTumorErrors;
my $bed;
my $fasta;
my $saaf = 0.5;
my $mcovs;
my $min_cov = 10;
my $min_perc_cov = 0.5;
my $e = 0.005;
my $het = 0.001;
my $gaaf = 15;

GetOptions("bed=s" => \$bed,
						"dbsnp=s" => \$dbsnp,
						"BQ=i" => \$BQ,
						"MQ=i" => \$MQ,
						"normal=s" => \$normal,
						"tumor=s" => \$tumor,
						"pdir=s" => \$pdir,
						"h" => \$h,
						"noBlacklist" => \$noBlacklist,
						"useTumorErrors" => \$useTumorErrors,
						"saaf=f" => \$saaf,
						"mcovs=s" => \$mcovs,
						"e=f" => \$e,
						"het=f" => \$het,
						"gaaf=f" => \$gaaf,
						"fasta=s" => \$fasta);

die "$usage" if($h);
die "\n$usage\nERROR: Must provide BED file!\n\n" if(!$bed);
die "\n$usage\nERROR: Bed file \"$bed\" doesn't exist!\n\n" if(!(-e $bed));
die "\n$usage\nERROR: Must provide FASTA file!\n\n" if(!$fasta);
die "\n$usage\nERROR: Fasta file \"$fasta\" doesn't exist!\n\n" if(!(-e $fasta));
die "\n$usage\nERROR: Must provide the full path to the Output Directory!\n\n" if(!$pdir);
die "\n$usage\nERROR: The Directory \"$pdir\" doesn't exists!\n\n" if(!(-d $pdir));
die "\n$usage\nERROR: Must provide dbSNP file!\n\n" if(!$dbsnp);
die "\n$usage\nERROR: dbSNP file \"$dbsnp\" doesn't exist!\n\n" if(!(-e $dbsnp));
die "\n$usage\nERROR: Must provide a dbSNP file in VCF format!\n\n" if(!($dbsnp =~ m/\.vcf/));
die "\n$usage\nERROR: Please Specify the name of the normal sample. This should be consistent throughout all Mutascope modules..\n\n" if(!$normal);
die "\n$usage\nERROR: Please Specify the name of the tumor sample. This should be consistent throughout all Mutascope modules..\n\n" if(!$tumor);
die "\n$usage\nERROR: The normal sample name can NOT have a '_' in the name.  Please use a different sample name other than \"$normal\".\n\n" if($normal =~ m/_/);
die "\n$usage\nERROR: The tumor sample name can NOT have a '_' in the name.  Please use a different sample name other than \"$tumor\".\n\n" if($tumor =~ m/_/);
die "\n$usage\nERROR: The file $pdir\/intermediate/$normal.xpileup.gz doesn't exists!\nCheck to make sure you put in the correct sample name ($normal) along with the correct directory ($pdir).\n\nThis module assumes you ran Mutascope xpileup.\n\n" if(!(-e "$pdir\/intermediate/$normal.xpileup.gz"));
die "\n$usage\nERROR: The file $pdir\/intermediate/$tumor.xpileup.gz doesn't exists!\nCheck to make sure you put in the correct sample name ($tumor) along with the correct directory ($pdir).\n\nThis program assumes you ran Mutascope xpileup.\n\n" if(!(-e "$pdir\/intermediate/$tumor.xpileup.gz"));


check_outDir($pdir);
check_bed($bed);
check_for_R();

my $fasta_2bit = check_for_fasta_twobit($fasta);


my @tmps = split(/\//, $bed);
my $bed_name = "$pdir\/intermediate/".$tmps[$#tmps];
$bed_name =~ s/.bed//;

if($mcovs){
	die "\n$usage\nERROR: mcovs format is NOT correct. Must be in the INT,FLOAT format!\n\n" if(!($mcovs =~ m/\d+,(\d+|\.)/));
	($min_cov, $min_perc_cov) = split(/,/, $mcovs);
}
$min_perc_cov = $min_perc_cov/100;


die "\n$usage\nERROR: The black list file \"$bed_name.blacklist\" does NOT exist. Make sure that this file is in the same directory as your BED file. If you do not have this file use Mutascope makeBlackList to generate it OR specify \"-noBlacklist\" in the command options.\n\n" if(!(-e "$bed_name.blacklist") and !$noBlacklist);

die "\n$usage\nERROR: Can NOT find \"$pdir\/intermediate/$normal.errorRates\". If this file does not exist then run Mutascope calcErrorRates to generate the file.\n\n" if(!(-e "$pdir\/intermediate/$normal.errorRates"));

my $error_rates;
if(!$useTumorErrors){
	$error_rates = "$pdir\/intermediate/$normal.errorRates";
	die "\n$usage\nERROR:The file \"$pdir\/intermediate/$normal.errorRates\" doesn't exist.  Please run Mutascope calcErrorRates on the normal sample $normal\n\n" if(!(-e "$pdir\/intermediate/$normal.errorRates"));
}else{
	$error_rates = "$pdir\/intermediate/$tumor.errorRates";
	die "\n$usage\nERROR:The file \"$pdir\/intermediate/$tumor.errorRates\" doesn't exist.  Please run Mutascope calcErrorRates on the tumor sample $tumor\n\n" if(!(-e "$pdir\/intermediate/$tumor.errorRates"));
}

`perl $abs_path/somatic_caller.pl -BQ $BQ -MQ $MQ -twoBit $fasta_2bit -gaaf $gaaf -min_perc_cov $min_perc_cov -het $het -e $e -saaf $saaf -min_cov $min_cov -pdir $pdir -normal $normal -tumor $tumor -bed $bed -error_rates $error_rates -blacklist $bed_name.blacklist -dbsnp $dbsnp -nxpileup $pdir\/intermediate/$normal.xpileup.gz -txpileup $pdir\/intermediate/$tumor.xpileup.gz > $pdir\/results/$normal\_vs_$tumor.vcf` if(!$noBlacklist);

`perl $abs_path/somatic_caller.pl -BQ $BQ -MQ $MQ -twoBit $fasta_2bit -gaaf $gaaf -min_perc_cov $min_perc_cov -het $het -e $e -saaf $saaf -min_cov $min_cov -pdir $pdir -normal $normal -tumor $tumor -bed $bed -error_rates $error_rates -noBlacklist -dbsnp $dbsnp -nxpileup $pdir\/intermediate/$normal.xpileup.gz -txpileup $pdir\/intermediate/$tumor.xpileup.gz > $pdir\/results/$normal\_vs_$tumor.vcf` if($noBlacklist);

`perl $abs_path/filter_tumorNormal_vcf.pl -vcf $pdir\/results/$normal\_vs_$tumor.vcf > $pdir\/results/$normal\_vs_$tumor\_filtered.vcf`;

`rm $pdir\/results/$normal\_vs_$tumor.vcf` if(-e "$pdir\/results/$normal\_vs_$tumor.vcf");

`perl $abs_path/make_logR_file.pl $pdir\/quality/$normal\_readsPerAmplicon.txt $pdir\/quality/$tumor\_readsPerAmplicon.txt > $pdir\/results/$normal\_vs_$tumor\_ampliconLogR.txt` if(-e "$pdir\/quality/$normal\_readsPerAmplicon.txt" and -e "$pdir\/quality/$tumor\_readsPerAmplicon.txt");


`perl $abs_path/generate_info_for_TNPlot.pl $pdir\/results/$normal\_vs_$tumor\_filtered.vcf $pdir\/intermediate/$normal\_vs_$tumor\_filtered_plotInfo.txt`;

`R --slave --args $pdir\/intermediate/$normal\_vs_$tumor\_filtered_plotInfo.txt $pdir\/quality/$normal\_vs_$tumor\_filtered_variantPlot.pdf < $abs_path/variant_QC_plot.r`;

`rm $pdir\/intermediate/$normal\_vs_$tumor\_filtered_plotInfo.txt`;

sub check_outDir($){
	my ($od) = @_;
	if(!(-d "$od/results")){
		`mkdir $od/results`;
		print STDERR "Making \"$od/results\" directory!\n";
	}
	if(!(-d "$od/intermediate")){
		`mkdir $od/intermediate`;
		print STDERR "Making \"$od/intermediate\" directory!\n";
	}
	if(!(-d "$od/quality")){
		`mkdir $od/quality`;
		print STDERR "Making \"$od/quality\" directory!\n";
	}
}


sub check_bed($){
	my ($bed) = @_;
	open(BED, $bed);
	while(my $line = <BED>){
		chomp $line;
		next if($line =~ m/^track/);
		next if($line =~ m/^#/);
		next if($line =~ m/^>/);
		
		my ($chr, $start, $stop, $name, $score, $strand, $pstart, $pstop, @other) = split(/\t/, $line);
		die "The BED line \"$line\" is not the proper format!\nSee the Manual.pdf for BED format details.\n\n" if(!$pstart);
		die "The BED line \"$line\" is not the proper format!\nSee the Manual.pdf for BED format details.\n\n" if(!$pstop);
		die "The BED line \"$line\" is not the proper format!\nSee the Manual.pdf for BED format details.\n\n" if(!$start);
		die "The BED line \"$line\" is not the proper format!\nSee the Manual.pdf for BED format details.\n\n" if(!$stop);
		die "The BED line \"$line\" is not the proper format!\nSee the Manual.pdf for BED format details.\n\n" if($start > $pstart);
		die "The BED line \"$line\" is not the proper format!\nSee the Manual.pdf for BED format details.\n\n" if($stop < $pstop);
		die "The BED line \"$line\" is not the proper format!\nSee the Manual.pdf for BED format details.\n\n" if($pstart > $pstop);
		die "The BED line \"$line\" is not the proper format!\nSee the Manual.pdf for BED format details.\n\n" if($start > $stop);
		
	}
	close(BED);
}

sub check_for_R(){
	my $r_result = `which R`;
	chomp $r_result;
	if($r_result eq ""){
		die "ERROR: Can NOT find R.  You need to install R before running this script! See http://www.r-project.org/\n";
	}
}

sub check_for_fasta_twobit($){
	my ($f) = @_;
	$f =~ s/.fa//;
	die "\nERROR: The FASTA 2bit file '$f.2bit' must be in the same folder as the $f.fa file!!!\n\nTo generate the 2bit file run the command: scripts/faToTwoBit -noMask $f.fa $f.2bit\n\n" if(!(-e "$f.2bit"));
	return("$f.2bit");
}


